
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  customerId: 'customerId',
  orderId: 'orderId',
  totalAmount: 'totalAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  quantity: 'quantity',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  avatar: 'avatar',
  isGuest: 'isGuest',
  customerType: 'customerType',
  storeId: 'storeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseHistoryScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  totalAmount: 'totalAmount',
  date: 'date',
  customerId: 'customerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerGroupsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  storeId: 'storeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerGroupMemberScalarFieldEnum = {
  customerId: 'customerId',
  customerGroupId: 'customerGroupId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  amount: 'amount',
  description: 'description',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  date: 'date',
  locationId: 'locationId',
  storeId: 'storeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExpenseCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  date: 'date',
  expenseId: 'expenseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeatureFlagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  isEnabled: 'isEnabled',
  rollout: 'rollout',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BankDetailsScalarFieldEnum = {
  id: 'id',
  bankName: 'bankName',
  bankCode: 'bankCode',
  accountName: 'accountName',
  accountNumber: 'accountNumber',
  storeId: 'storeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  balance: 'balance',
  storeId: 'storeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  invoiceNumber: 'invoiceNumber',
  title: 'title',
  customerEmail: 'customerEmail',
  description: 'description',
  status: 'status',
  downloadUrl: 'downloadUrl',
  paymentLink: 'paymentLink',
  qrCode: 'qrCode',
  amount: 'amount',
  total: 'total',
  tax: 'tax',
  dueDate: 'dueDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  country: 'country',
  region: 'region',
  city: 'city',
  storeId: 'storeId',
  isdefaultLocation: 'isdefaultLocation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  locationId: 'locationId',
  createdBy: 'createdBy',
  storeId: 'storeId',
  shippingMethodId: 'shippingMethodId',
  grandTotal: 'grandTotal',
  iscustomerAssigned: 'iscustomerAssigned',
  status: 'status',
  paymentStatus: 'paymentStatus',
  paymentMethod: 'paymentMethod',
  deliveryTrackingNumber: 'deliveryTrackingNumber',
  totalAmount: 'totalAmount',
  subtotalAmount: 'subtotalAmount',
  discountAmount: 'discountAmount',
  taxAmount: 'taxAmount',
  shippingFee: 'shippingFee',
  shippingZoneName: 'shippingZoneName',
  shippingAddress: 'shippingAddress',
  shippingStatus: 'shippingStatus',
  channel: 'channel',
  isposConfirmed: 'isposConfirmed',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  customerPhoneNumber: 'customerPhoneNumber',
  posConfirmedAt: 'posConfirmedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  price: 'price',
  orderId: 'orderId'
};

exports.Prisma.POSScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  orderId: 'orderId',
  customerId: 'customerId',
  terminalId: 'terminalId',
  confirmed: 'confirmed',
  confirmedAt: 'confirmedAt'
};

exports.Prisma.PointOfSaleScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  staffAssignedId: 'staffAssignedId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  shortDescription: 'shortDescription',
  description: 'description',
  sku: 'sku',
  stock: 'stock',
  price: 'price',
  shippingWeight: 'shippingWeight',
  handleTime: 'handleTime',
  freeShipping: 'freeShipping',
  packaging: 'packaging',
  discountPrice: 'discountPrice',
  unitSold: 'unitSold',
  length: 'length',
  width: 'width',
  height: 'height',
  productSize: 'productSize',
  productStatus: 'productStatus',
  imageUrl: 'imageUrl',
  storeId: 'storeId',
  locationId: 'locationId',
  purchaseOrderId: 'purchaseOrderId',
  collectionId: 'collectionId',
  hasVariation: 'hasVariation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  warehouseId: 'warehouseId'
};

exports.Prisma.ProductCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  productId: 'productId',
  storeId: 'storeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductCollectionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductVariationScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  color: 'color',
  size: 'size',
  sku: 'sku',
  price: 'price',
  stock: 'stock',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeaturedBrandsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  productId: 'productId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  supplierName: 'supplierName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  personOfSupplier: 'personOfSupplier',
  location: 'location',
  storeId: 'storeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseScalarFieldEnum = {
  id: 'id',
  status: 'status',
  downloadUrl: 'downloadUrl',
  toalCost: 'toalCost',
  storeSupplierId: 'storeSupplierId',
  storeId: 'storeId',
  deliveryDate: 'deliveryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  emailVerified: 'emailVerified',
  image: 'image',
  role: 'role',
  banned: 'banned',
  banReason: 'banReason',
  banExpires: 'banExpires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  locationId: 'locationId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId',
  impersonatedBy: 'impersonatedBy',
  activeOrganizationId: 'activeOrganizationId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  logo: 'logo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  metadata: 'metadata',
  businessName: 'businessName',
  businessType: 'businessType',
  storeBaseCurrency: 'storeBaseCurrency',
  banner: 'banner',
  phoneNumber: 'phoneNumber',
  email: 'email',
  website: 'website',
  description: 'description',
  country: 'country',
  address: 'address',
  state: 'state',
  region: 'region',
  zipCode: 'zipCode',
  city: 'city',
  status: 'status',
  storeTag: 'storeTag',
  whitelabel: 'whitelabel',
  facebook: 'facebook',
  instagram: 'instagram',
  tiktok: 'tiktok',
  twitter: 'twitter',
  linkedin: 'linkedin',
  currency: 'currency',
  storeUrl: 'storeUrl',
  storeApproval: 'storeApproval',
  modifyProductState: 'modifyProductState'
};

exports.Prisma.MemberScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvitationScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  email: 'email',
  role: 'role',
  status: 'status',
  expiresAt: 'expiresAt',
  inviterId: 'inviterId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SettlementScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  storeId: 'storeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShippingScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  shippingMethodId: 'shippingMethodId',
  trackingNumber: 'trackingNumber',
  carrier: 'carrier',
  status: 'status',
  estimatedDelivery: 'estimatedDelivery',
  actualDelivery: 'actualDelivery',
  shippingAddress: 'shippingAddress',
  shippingZoneName: 'shippingZoneName',
  shippingFee: 'shippingFee',
  weight: 'weight',
  dimensions: 'dimensions',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShippingMethodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  storeId: 'storeId',
  description: 'description',
  carrier: 'carrier',
  deliveryTime: 'deliveryTime',
  baseCost: 'baseCost',
  costCalculation: 'costCalculation',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShippingZoneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  storeId: 'storeId',
  countries: 'countries',
  regions: 'regions',
  postalCodes: 'postalCodes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShippingAuditScalarFieldEnum = {
  id: 'id',
  shippingId: 'shippingId',
  action: 'action',
  details: 'details',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  metadata: 'metadata'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  channel: 'channel',
  customersId: 'customersId',
  customersCode: 'customersCode',
  storeId: 'storeId',
  authorizationCode: 'authorizationCode',
  status: 'status',
  cardType: 'cardType',
  cardBank: 'cardBank',
  cardBrand: 'cardBrand',
  countryCode: 'countryCode',
  accountName: 'accountName',
  cardBin: 'cardBin',
  cardLast4: 'cardLast4',
  expMonth: 'expMonth',
  expYear: 'expYear',
  interval: 'interval',
  emailToken: 'emailToken',
  startDate: 'startDate',
  endsAt: 'endsAt',
  cancelledAt: 'cancelledAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  plansName: 'plansName',
  plansCode: 'plansCode',
  plansId: 'plansId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WarehouseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isDefaultLocation: 'isDefaultLocation',
  staffId: 'staffId',
  storeId: 'storeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  productId: 'productId',
  warehouseId: 'warehouseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.CustomerType = exports.$Enums.CustomerType = {
  New: 'New',
  Old: 'Old',
  Vip: 'Vip'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  pending: 'pending',
  awaiting_review: 'awaiting_review',
  completed: 'completed',
  shipped: 'shipped',
  shipping: 'shipping',
  cancelled: 'cancelled'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PAID: 'PAID',
  PARTLY_PAID: 'PARTLY_PAID',
  UNPAID: 'UNPAID',
  REFUNDED: 'REFUNDED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  BANK_TRANSFER: 'BANK_TRANSFER',
  TERMINAL: 'TERMINAL'
};

exports.ProductStatus = exports.$Enums.ProductStatus = {
  Unpublished: 'Unpublished',
  Published: 'Published'
};

exports.ShippingStatus = exports.$Enums.ShippingStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  LABEL_CREATED: 'LABEL_CREATED',
  IN_TRANSIT: 'IN_TRANSIT',
  OUT_FOR_DELIVERY: 'OUT_FOR_DELIVERY',
  DELIVERED: 'DELIVERED',
  RETURNED: 'RETURNED',
  FAILED: 'FAILED'
};

exports.Prisma.ModelName = {
  Cart: 'Cart',
  CartItem: 'CartItem',
  Customer: 'Customer',
  PurchaseHistory: 'PurchaseHistory',
  CustomerGroups: 'CustomerGroups',
  CustomerGroupMember: 'CustomerGroupMember',
  Expense: 'Expense',
  ExpenseCategory: 'ExpenseCategory',
  FeatureFlag: 'FeatureFlag',
  BankDetails: 'BankDetails',
  Wallet: 'Wallet',
  Invoice: 'Invoice',
  Location: 'Location',
  Order: 'Order',
  OrderItem: 'OrderItem',
  POS: 'POS',
  PointOfSale: 'PointOfSale',
  Product: 'Product',
  ProductCategory: 'ProductCategory',
  ProductCollection: 'ProductCollection',
  ProductVariation: 'ProductVariation',
  FeaturedBrands: 'FeaturedBrands',
  Supplier: 'Supplier',
  Purchase: 'Purchase',
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Organization: 'Organization',
  Member: 'Member',
  Invitation: 'Invitation',
  Settlement: 'Settlement',
  Shipping: 'Shipping',
  ShippingMethod: 'ShippingMethod',
  ShippingZone: 'ShippingZone',
  ShippingAudit: 'ShippingAudit',
  Subscription: 'Subscription',
  Plan: 'Plan',
  Transaction: 'Transaction',
  Warehouse: 'Warehouse',
  Inventory: 'Inventory'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
