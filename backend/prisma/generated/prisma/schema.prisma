model Cart {
  id          String     @id @default(uuid())
  storeId     String
  customerId  String
  orderId     String     @unique
  cartItems   CartItem[]
  totalAmount Float
  order       Order      @relation(fields: [orderId], references: [id])
  customer    Customer   @relation(fields: [customerId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("cart")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String // assumes you have a Product model
  quantity  Int
  price     Float // price per unit at the time it was added to cart
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cartitem")
}

model Customer {
  id                  String                @id @default(uuid())
  name                String
  email               String?               @unique
  phoneNumber         String?
  avatar              String?
  isGuest             Boolean               @default(true)
  customerType        CustomerType          @default(New)
  storeId             String?
  orders              Order[]
  carts               Cart[]
  purchaseHistory     PurchaseHistory[]
  pos                 POS[]
  customerGroupMember CustomerGroupMember[]
  store               Organization?         @relation(fields: [storeId], references: [id])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  @@map("customer")
}

enum CustomerType {
  New
  Old
  Vip
}

model PurchaseHistory {
  id          String   @id @default(uuid())
  orderId     String
  totalAmount Float
  date        DateTime
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("purchasehistory")
}

model CustomerGroups {
  id                  String                @id @default(uuid())
  name                String
  storeId             String
  store               Organization          @relation(fields: [storeId], references: [id])
  customerGroupMember CustomerGroupMember[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  @@map("customergroup")
}

model CustomerGroupMember {
  customerId      String
  customerGroupId String
  customer        Customer       @relation(fields: [customerId], references: [id])
  customerGroup   CustomerGroups @relation(fields: [customerGroupId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@id([customerId, customerGroupId])
  @@map("customergroupmember")
}

model Domain {
  id                 String       @id @default(uuid())
  storeId            String       @unique
  domainNames        String[]
  paymentStatus      String?
  paymentRef         String?
  lockStatus         String
  domainPrice        Decimal?
  pricePaid          Decimal?
  isdomainRegistered Boolean
  domainProvider     String?
  expiryDate         String
  failedReason       String?
  isActive           Boolean
  store              Organization @relation(fields: [storeId], references: [id])
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@map("domain")
}

model Expense {
  id              String            @id @default(uuid())
  name            String?
  amount          Float?
  description     String?
  paymentMethod   String?
  paymentStatus   String?
  date            DateTime?
  locationId      String
  expenseCategory ExpenseCategory[]
  store           Organization      @relation(fields: [storeId], references: [id])
  storeId         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("expense")
}

model ExpenseCategory {
  id          String   @id @default(uuid())
  name        String
  description String
  date        DateTime
  expenseId   String   @unique
  expense     Expense  @relation(fields: [expenseId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("expensecategory")
}

model FeatureFlag {
  id          String   @id @default(uuid())
  name        String
  slug        String
  isEnabled   Boolean
  rollout     Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("featureflag")
}

model BankDetails {
  id            String       @id @default(uuid())
  bankName      String
  bankCode      String
  accountName   String
  accountNumber String
  storeId       String       @unique
  store         Organization @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("bankdetails")
}

model Wallet {
  id        String       @id @default(uuid())
  balance   Decimal
  storeId   String       @unique
  store     Organization @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("wallet")
}

model Invoice {
  id            String       @id @default(uuid())
  storeId       String
  invoiceNumber String
  title         String
  customerEmail String
  description   String?
  status        String?
  downloadUrl   String
  paymentLink   String?
  qrCode        String?
  amount        String
  total         Decimal      @default(0.00)
  tax           Decimal      @default(0.00)
  dueDate       DateTime
  store         Organization @relation(fields: [storeId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("invoice")
}

model Location {
  id                String       @id @default(uuid())
  name              String
  address           String?
  country           String?
  region            String?
  city              String?
  description       String?
  storeId           String
  isdefaultLocation Boolean?
  user              User[]
  order             Order[]
  product           Product[]
  store             Organization @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@map("location")
}

model Order {
  id                     String        @id @default(uuid())
  customerId             String
  locationId             String
  createdBy              String?
  storeId                String?
  shippingMethodId       String?
  grandTotal             Float
  iscustomerAssigned     Boolean       @default(false)
  status                 OrderStatus   @default(pending)
  paymentStatus          PaymentStatus @default(UNPAID)
  paymentMethod          PaymentMethod
  deliveryTrackingNumber Int
  totalAmount            Float
  subtotalAmount         Float
  discountAmount         Float?
  taxAmount              Float
  shippingFee            Float
  shippingZoneName       String?
  shippingAddress        String?
  shippingStatus         String?
  orderItems             OrderItem[]
  pos                    POS?
  cart                   Cart?
  channel                String?
  isposConfirmed         Boolean?      @default(false)
  customer               Customer      @relation(fields: [customerId], references: [id])
  location               Location?     @relation(fields: [locationId], references: [id])
  store                  Organization? @relation(fields: [storeId], references: [id])
  // Fixed custormer details
  customerName           String
  customerEmail          String
  customerPhoneNumber    String
  posConfirmedAt         DateTime?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt

  @@map("order")
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id])

  @@map("orderitem")
}

enum OrderStatus {
  pending
  awaiting_review
  completed
  shipped
  shipping
  cancelled
}

enum PaymentStatus {
  PAID
  PARTLY_PAID
  UNPAID
  REFUNDED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  TERMINAL
}

model POS {
  id          String    @id @default(uuid())
  staffId     String
  orderId     String    @unique
  customerId  String
  terminalId  String
  confirmed   Boolean   @default(false)
  confirmedAt DateTime?
  customer    Customer  @relation(fields: [customerId], references: [id])
  staff       User      @relation(fields: [staffId], references: [id])
  order       Order     @relation(fields: [orderId], references: [id])

  @@map("pos")
}

model PointOfSale {
  id              String       @id @default(uuid())
  storeId         String       @unique
  staffAssignedId String       @unique
  store           Organization @relation(fields: [storeId], references: [id])
  staffAssigned   User         @relation(fields: [staffAssignedId], references: [id])
  createdAt       DateTime
  updatedAt       DateTime     @updatedAt

  @@map("pointofsale")
}

model Product {
  id               String             @id @default(uuid())
  name             String
  shortDescription String?
  description      String?
  sku              String?            @unique
  stock            Int?
  price            Float
  discountPrice    Float?
  shippingWeight   String?
  handleTime       String?
  isfreeShipping   Boolean?
  packaging        String?
  unitSold         String?
  length           Float?
  width            Float?
  height           Float?
  productSize      String?
  productStatus    ProductStatus?     @default(Unpublished)
  imageUrl         String[] // Prisma supports arrays in PostgreSQL and MongoDB
  storeId          String
  locationId       String?
  purchaseOrderId  String?
  collectionId     String?
  warehouseId      String?
  hasVariation     Boolean?
  featuredBrands   FeaturedBrands[]
  cartItems        CartItem[]
  productVariation ProductVariation[]
  productCategory  ProductCategory[]
  inventoryItems   Inventory[] // Link to inventory records
  collection       ProductCollection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  purchase         Purchase?          @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  store            Organization       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  warehouse        Warehouse?         @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  location         Location?          @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@map("product")
}

model ProductCategory {
  id          String       @id @default(uuid())
  name        String?
  description String?
  storeId     String
  product     Product[]
  store       Organization @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("productcategory")
}

model ProductCollection {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("productcollection")
}

model ProductVariation {
  id            String                   @id @default(uuid())
  productId     String
  sku           String                   @unique
  price         Float
  cost          Float?
  discountPrice Float?
  stock         Int                      @default(0)
  imageUrl      String?
  product       Product                  @relation(fields: [productId], references: [id], onDelete: Cascade)
  options       ProductVariationOption[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt

  @@map("productvariation")
}

model ProductVariant {
  id        String                @id @default(uuid())
  name      String
  values    ProductVariantValue[]
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  @@map("productvariant")
}

model ProductVariantValue {
  id        String                   @id @default(uuid())
  variantId String
  value     String
  variant   ProductVariant           @relation(fields: [variantId], references: [id], onDelete: Cascade)
  options   ProductVariationOption[]
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt

  @@map("productvariantvalue")
}

model ProductVariationOption {
  id          String              @id @default(uuid())
  variationId String
  valueId     String
  variation   ProductVariation    @relation(fields: [variationId], references: [id], onDelete: Cascade)
  value       ProductVariantValue @relation(fields: [valueId], references: [id], onDelete: Cascade)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@unique([variationId, valueId]) // prevent duplicate values in same SKU
  @@map("productvariantoption")
}

model FeaturedBrands {
  id        String   @id @default(uuid())
  name      String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("featuredbrands")
}

enum ProductStatus {
  Unpublished
  Published
}

model Supplier {
  id               String       @id @default(uuid())
  supplierName     String
  email            String
  phoneNumber      String
  personOfSupplier String
  location         String
  purchase         Purchase[]
  storeId          String
  store            Organization @relation(fields: [storeId], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@map("supplier")
}

model Purchase {
  id              String       @id @default(uuid())
  status          String
  downloadUrl     String
  toalCost        Decimal
  storeSupplierId String
  storeId         String
  deliveryDate    DateTime
  storeSupplier   Supplier     @relation(fields: [storeSupplierId], references: [id])
  store           Organization @relation(fields: [storeId], references: [id])
  products        Product[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("purchase")
}

// Datasource

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["queryCompiler", "driverAdapters"]
}

model User {
  id            String       @id @default(uuid())
  name          String?
  firstName     String
  middleName    String?
  lastName      String
  email         String
  phoneNumber   String?
  emailVerified Boolean?
  image         String?
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  members       Member[]
  invitations   Invitation[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  sessions      Session[]
  accounts      Account[]
  // Custom section
  location      Location?    @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId    String?
  PointOfSale   PointOfSale?
  warehouse     Warehouse?

  POS POS[]

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy       String?
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id                 String            @id
  name               String
  slug               String?
  logo               String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  metadata           String?
  members            Member[]
  invitations        Invitation[]
  // Custom section
  businessName       String?
  businessType       String?
  storeBaseCurrency  String?           @default("GHS")
  banner             String?
  phoneNumber        String?
  email              String?
  website            String?
  description        String?
  country            String?
  address            String?
  state              String?
  region             String?
  zipCode            String?
  city               String?
  status             String?
  storeTag           String?
  whitelabel         String?
  facebook           String?
  instagram          String?
  tiktok             String?
  twitter            String?
  linkedin           String?
  currency           String?           @default("GHS")
  storeUrl           String?
  storeApproval      Boolean?
  modifyProductState Boolean?
  domain             Domain?
  bankDetails        BankDetails?
  wallet             Wallet?
  location           Location[]
  order              Order[]
  customer           Customer[]
  customerGroups     CustomerGroups[]
  expense            Expense[]
  invoice            Invoice[]
  pointOfSale        PointOfSale?
  product            Product[]
  supplier           Supplier[]
  purchase           Purchase[]
  settlements        Settlement[]
  subscription       Subscription?
  transaction        Transaction[]
  warehouse          Warehouse[]
  ShippingMethod     ShippingMethod[]
  ShippingZone       ShippingZone[]
  productCategory    ProductCategory[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("invitation")
}

model Settlement {
  id        String       @id @default(uuid())
  amount    Decimal
  storeId   String
  store     Organization @relation(fields: [storeId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("settlement")
}

model Shipping {
  id                String          @id @default(uuid())
  orderId           String // References your order system
  shippingMethodId  String
  shippingMethod    ShippingMethod  @relation(fields: [shippingMethodId], references: [id])
  trackingNumber    String?
  carrier           String? // e.g., "FedEx", "UPS"
  status            ShippingStatus  @default(PENDING)
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  shippingAddress   String
  shippingZoneName  String?
  shippingFee       Decimal         @default(0)
  weight            Float?
  dimensions        String? // "LxWxH" format
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  auditLogs         ShippingAudit[]

  @@map("shipping")
}

model ShippingMethod {
  id              String         @id @default(uuid())
  name            String // e.g., "Standard", "Express"
  storeId         String
  store           Organization   @relation(fields: [storeId], references: [id])
  description     String?
  carrier         String? // Specific carrier if fixed
  deliveryTime    String // e.g., "3-5 business days"
  baseCost        Float
  costCalculation String? // JSON for complex calculations
  isActive        Boolean        @default(true)
  shippingZones   ShippingZone[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  Shipping        Shipping[]

  @@map("shippingmethod")
}

model ShippingZone {
  id              String           @id @default(uuid())
  name            String
  storeId         String
  store           Organization     @relation(fields: [storeId], references: [id])
  countries       String[] // Country codes
  regions         String[] // State/region names
  postalCodes     String[]
  shippingMethods ShippingMethod[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("shippingzone")
}

model ShippingAudit {
  id         String   @id @default(uuid())
  shippingId String
  shipping   Shipping @relation(fields: [shippingId], references: [id])
  action     String // e.g., "Label Created", "In Transit"
  details    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String?
  metadata   Json?

  @@map("shippingaudit")
}

enum ShippingStatus {
  PENDING
  PROCESSING
  LABEL_CREATED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  RETURNED
  FAILED
}

// model Store {
//     id                 Int              @id @default(autoincrement())
//     name               String
//     businessName       String?
//     businessType       String?
//     ownerId            Int?             @unique
//     owner              User?            @relation(fields: [ownerId], references: [id])
//     logo               String?
// storeBaseCurrency  String           @default("GH")
// banner             String?
// phoneNumber        String?
// email              String?
// website            String?
// about              String?
// country            String?
// address            String?
// state              String?
// region             String?
// zipCode            String?
// city               String?
// status             String?
// storeTag           String?
// whitlabel          String?
// facebook           String?
// instagram          String?
// tiktok             String?
// twitter            String?
// linkedin           String?
// currency           String           @default("GH")
// storeUrl           String?
// storeApproval      Boolean?
// modifyProductState String?
//     wallet             Wallet?
//     locations          Location[]
//     product            Product[]
//     hasAccess          Boolean?
//     banks              BankDetails[]
//     warehouses         Warehouse[]
//     subscription       Subscription[]
//     settlement         Settlement[]
//     order              Order[]
//     customer           Customer[]
//     customerGroups     CustomerGroups[]
//     expense            Expense[]
//     supplier           Supplier[]
//     purchase           Purchase[]
//     transaction        Transaction[]
//     pos                PointOfSale?
//     createdAt          DateTime         @default(now())
//     updatedAt          DateTime         @updatedAt

// }
// 

model Subscription {
  id                Int           @id @default(autoincrement())
  amount            Decimal?
  channel           String?
  customersId       Int?
  customersCode     String?
  storeId           String?       @unique
  authorizationCode String?
  status            String?
  cardType          String?
  cardBank          String?
  cardBrand         String?
  countryCode       String?
  accountName       String?
  cardBin           Int?
  cardLast4         Int?
  expMonth          Int?
  expYear           Int?
  interval          String?
  emailToken        String?
  store             Organization? @relation(fields: [storeId], references: [id])
  startDate         DateTime?
  endsAt            DateTime?
  cancelledAt       DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@map("subscription")
}

model Plan {
  id        Int      @id @default(autoincrement())
  plansName String
  plansCode String
  plansId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plan")
}

model Transaction {
  id        String        @id @default(uuid())
  storeId   String?
  amount    Decimal
  store     Organization? @relation(fields: [storeId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("transaction")
}

model Warehouse {
  id                String       @id @default(uuid())
  name              String
  inventory         Product[]
  isDefaultLocation Boolean?
  staffId           String       @unique
  storeId           String
  inventoryItems    Inventory[] // Link to inventory records
  staffAssigned     User         @relation(fields: [staffId], references: [id])
  store             Organization @relation(fields: [storeId], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@map("warehouse")
}

model Inventory {
  id          String    @id @default(uuid())
  quantity    Int       @default(0)
  productId   String
  warehouseId String
  product     Product   @relation(fields: [productId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("inventory")
}
